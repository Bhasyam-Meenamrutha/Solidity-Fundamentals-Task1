// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract ProposalContract {
    address owner;
    uint256 private counter;

    struct Proposal {
        string title; 
        string description; 
        uint256 approve; 
        uint256 reject; 
        uint256 pass; 
        uint256 total_vote_to_end; 
        bool current_state; 
        bool is_active; 
    }

    constructor() {
        owner = msg.sender;
        voted_addresses.push(msg.sender);
    }
    
    

    modifier active() {
    require(proposal_history[counter].is_active == true, "The proposal is not active");
    _;
    }
    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
    }

    function setOwner(address new_owner) external onlyOwner {
    owner = new_owner;
    }

    mapping(uint256 => Proposal) proposal_history; // Recordings of previous proposals

    address[]  private voted_addresses;

    // Updated create function to take a title as well
    function create(string calldata _title, string calldata _description, uint256 _total_vote_to_end) external onlyOwner{
        counter += 1;
        proposal_history[counter] = Proposal(_title, _description, 0, 0, 0, _total_vote_to_end, false,true  );
    }

    function vote(uint8 choice) external {
        // First part
    Proposal storage proposal = proposal_history[counter];
    uint256 total_vote = proposal.approve + proposal.reject + proposal.pass;

    // Second part
    if (choice == 1) {
        proposal.approve += 1;
        proposal.current_state = calculateCurrentState();
    } else if (choice == 2) {
        proposal.reject += 1;
        proposal.current_state = calculateCurrentState();
    } else if (choice == 0) {
        proposal.pass += 1;
        proposal.current_state = calculateCurrentState();
    }

    // Third part
    if ((proposal.total_vote_to_end - total_vote == 1) && (choice == 1 || choice == 2 || choice == 0)) {
        proposal.is_active = false;

    }
    }
}
